using GrantaTemplateGenerator.Templates;
using System;
using System.Collections.Generic;
using System.IO;

namespace GrantaTemplateGenerator.Classes
{
    public class GenerateConveyorLogic
    {
        public List<string> ConveyorLogic = new List<string>();
        public List<string> ConveyorLogicDeclarations = new List<string>();
        InfeedConvTemplates InfeedConvTemplates = new InfeedConvTemplates();
        OutfeedConvTemplates OutfeedConvTemplates = new OutfeedConvTemplates();
        PickConvTemplates PickConvTemplates = new PickConvTemplates();

        public void GetTemplates()
        {
            ConveyorLogic.Clear();
            ConveyorLogicDeclarations.Clear();
            PickConvTemplates.GenerateTemplates();
            InfeedConvTemplates.GenerateTemplates();
            OutfeedConvTemplates.GenerateTemplates();

        }

        public void GetDeclarationAndTypes()
        {
            PickConvTemplates.GetPickTypeL1();
            if ((int)globalVariables.Configvariables["iAmountPickConvs"] > 1)
            {
                PickConvTemplates.GetPickTypeL2();
            }
            PickConvTemplates.ReplaceVariables();
            InfeedConvTemplates.GetMotionLinxDeclarations();
            InfeedConvTemplates.GetMotionLinxLogic();
            InfeedConvTemplates.GetLane1InfDeclarations();
            InfeedConvTemplates.GetLane2InfDeclarations();
            OutfeedConvTemplates.GetNordMotorDeclarations();
            OutfeedConvTemplates.GetNordMotorLogic();
            OutfeedConvTemplates.GetLane1OutfDeclarations();
            OutfeedConvTemplates.GetLane2OutfDeclarations();

            ConveyorLogic.Add("                                                  //Auto Generated by Granta Template Bulder Mach1//");
            ConveyorLogic.Add("                                                      //ALWAYS CHECK VARIABLE LINKS ARE CORRECT//");
            ConveyorLogic.Add("//---------------------------------------------------------------===========================---------------------------------------------------------------//");
            ConveyorLogic.Add("//**************************************************************      MOTION LINX DRIVES     **************************************************************//");
            ConveyorLogic.Add("//---------------------------------------------------------------===========================---------------------------------------------------------------//");
            ConveyorLogic.AddRange(InfeedConvTemplates.MotionLinxLogic);
            ConveyorLogic.Add("//---------------------------------------------------------------===========================---------------------------------------------------------------//");
            ConveyorLogic.Add("//**************************************************************      NORD MOTOR DRIVES     *********************************8*****************************//");
            ConveyorLogic.Add("//---------------------------------------------------------------===========================---------------------------------------------------------------//");
            ConveyorLogic.AddRange(OutfeedConvTemplates.NordMotorLogic);
            ConveyorLogic.Add("//---------------------------------------------------------------===========================---------------------------------------------------------------//");
            ConveyorLogic.Add("//***************************************************************      LANE 1 CONVEYORS     ***************************************************************//");
            ConveyorLogic.Add("//---------------------------------------------------------------===========================---------------------------------------------------------------//");
            ConveyorLogic.AddRange(PickConvTemplates.SelectedPickConvL1);
            ConveyorLogic.AddRange(InfeedConvTemplates.ConveyorLogicL1Inf);
            ConveyorLogic.AddRange(OutfeedConvTemplates.ConveyorLogicL1Outf);
            if ((int)globalVariables.Configvariables["iLane2InfSections"] > 0)
            {
                ConveyorLogic.Add("//---------------------------------------------------------------===========================---------------------------------------------------------------//");
                ConveyorLogic.Add("//***************************************************************      LANE 2 CONVEYORS     ***************************************************************//");
                ConveyorLogic.Add("//---------------------------------------------------------------===========================---------------------------------------------------------------//");
                ConveyorLogic.AddRange(PickConvTemplates.SelectedPickConvL2);
                ConveyorLogic.AddRange(InfeedConvTemplates.ConveyorLogicL2Inf);
            }
            if ((int)globalVariables.Configvariables["iLane2OutfSections"] > 0)
            {
                ConveyorLogic.AddRange(OutfeedConvTemplates.ConveyorLogicL2Outf);
            }

            ConveyorLogicDeclarations.Add("FUNCTION_BLOCK fbConveyorsLogic");
            ConveyorLogicDeclarations.Add("VAR_INPUT");
            ConveyorLogicDeclarations.Add("L1Active                 : BOOL;");
            ConveyorLogicDeclarations.Add("L2Active                 : BOOL;");
            ConveyorLogicDeclarations.Add("END_VAR");               
            ConveyorLogicDeclarations.Add("VAR_OUTPUT");            
            ConveyorLogicDeclarations.Add("L1InfReadyForStacking    : BOOL;");
            ConveyorLogicDeclarations.Add("L2InfReadyForStacking    : BOOL;");
            ConveyorLogicDeclarations.Add("L1StackConv              : struct_StackConvCmds;");
            ConveyorLogicDeclarations.Add("L2StackConv              : struct_StackConvCmds;");
            ConveyorLogicDeclarations.Add("L1DeStackConv            : struct_DeStackConvCmds;");
            ConveyorLogicDeclarations.Add("L2DeStackConv            : struct_DeStackConvCmds;");
            ConveyorLogicDeclarations.Add("L1PickEnabled            : BOOL;");
            ConveyorLogicDeclarations.Add("L2PickEnabled            : BOOL;");
            ConveyorLogicDeclarations.Add("L1PlacePalletEnabled     : BOOL;");
            ConveyorLogicDeclarations.Add("L2PlacePalletEnabled     : BOOL;");
            ConveyorLogicDeclarations.Add("bL1StackPalletDetected   : BOOL;");
            ConveyorLogicDeclarations.Add("bL2StackPalletDetected   : BOOL;");
            ConveyorLogicDeclarations.Add("bL1PickConvFree          : BOOL;");
            ConveyorLogicDeclarations.Add("bL2PickConvFree          : BOOL;");
            ConveyorLogicDeclarations.Add("bL1PickConvClear         : BOOL;");
            ConveyorLogicDeclarations.Add("bL2PickConvClear         : BOOL;");
            ConveyorLogicDeclarations.Add("END_VAR");               
            ConveyorLogicDeclarations.Add("VAR");                   
            ConveyorLogicDeclarations.Add("bL1NotGripperSensors     : BOOL;");
            ConveyorLogicDeclarations.Add("bL1ResetPickConv         : BOOL;");
            ConveyorLogicDeclarations.Add("bL2NotGripperSensors     : BOOL;");
            ConveyorLogicDeclarations.Add("bL2ResetPickConv         : BOOL;"); 
            ConveyorLogicDeclarations.Add("sL1dummyBoxID            : STRING;");
            ConveyorLogicDeclarations.Add("sL2dummyBoxID            : STRING;");
            ConveyorLogicDeclarations.AddRange(PickConvTemplates.SelectedPickConvDecl);
            ConveyorLogicDeclarations.AddRange(InfeedConvTemplates.ConveyorL1InfLogicDecl);
            ConveyorLogicDeclarations.AddRange(OutfeedConvTemplates.ConveyorL1OutfLogicDecl);
            ConveyorLogicDeclarations.AddRange(InfeedConvTemplates.ConveyorL2InfLogicDecl);
            ConveyorLogicDeclarations.AddRange(OutfeedConvTemplates.ConveyorL2OutfLogicDecl);
            ConveyorLogicDeclarations.AddRange(InfeedConvTemplates.MotionLinxDecl);
            ConveyorLogicDeclarations.AddRange(OutfeedConvTemplates.NordMotorDecl);
            ConveyorLogicDeclarations.Add("END_VAR");
        }
        public bool WriteDeclarations()
        {

            bool retval = false;
            string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            string filePath = Path.Combine(folderPath, "GrantaTemplateBuilder", "ConveyorLogicDeclaration.txt");
            using (StreamWriter writer = new StreamWriter(filePath))
            {
                foreach (string line in ConveyorLogicDeclarations)
                {
                    writer.WriteLine(line);
                }
            }
            if (File.Exists(filePath))
            {
                retval = true;
            }
            return retval;
        }

        public bool WriteConveyorLogic()
        {
            bool retval = false;
            string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            string filePath = Path.Combine(folderPath, "GrantaTemplateBuilder", "ConveyorLogic.txt");
            using (StreamWriter writer = new StreamWriter(filePath))
            {
                foreach (string line in ConveyorLogic)
                {
                    writer.WriteLine(line);
                }
            }
            if (File.Exists(filePath))
            {
                retval = true;
            }
            return retval;
        }
    }
}
